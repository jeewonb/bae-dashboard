{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81484\\\\Documents\\\\mom-dashboard\\\\client\\\\src\\\\views\\\\validation.js\";\nimport React from 'react'; // NOTE: Deprecated\n\nimport Validation from 'react-validation'; // From v2.10.0\n\nimport validator from 'validator'; // Use Object.assign or any similar API to merge a rules\n// NOTE: IE10 doesn't have Object.assign API natively. Use polyfill/babel plugin.\n\nvar required = function required(value) {\n  if (!value.toString().trim().length) {\n    // We can return string or jsx as the 'error' prop for the validated Component\n    return 'require';\n  }\n};\n\nvar email = function email(value) {\n  if (!validator.isEmail(value)) {\n    return \"\".concat(value, \" is not a valid email.\");\n  }\n};\n\nvar lt = function lt(value, props) {\n  // get the maxLength from component's props\n  if (!value.toString().trim().length > props.maxLength) {\n    // Return jsx\n    return React.createElement(\"span\", {\n      className: \"form-error is-visible\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"The value exceeded \", props.maxLength, \" symbols.\");\n  }\n};\n\nvar alphabet = function alphabet(value, props) {\n  if (!validator.isAlpha(value)) return React.createElement(\"span\", {\n    className: \"form-error is-visible\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"String should contain only letters (a-zA-Z)\");\n};\n\nvar number = function number(value, props) {\n  if (!validator.isInt(value)) return React.createElement(\"span\", {\n    className: \"form-error is-visible\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Only proper number is required\");\n}; // This example shows a way to handle common task - compare two fields for equality\n\n\nvar password = function password(value, props) {\n  // rule function can accept argument:\n  // components - components registered to Form mapped by name\n  var password = components.password.state;\n  var passwordConfirm = components.passwordConfirm.state;\n  var isBothUsed = password && passwordConfirm && password.isUsed && passwordConfirm.isUsed;\n  var isBothChanged = isBothUsed && password.isChanged && passwordConfirm.isChanged;\n\n  if (isBothUsed && isBothChanged || password.value === passwordConfirm.value) {\n    return React.createElement(\"span\", {\n      className: \"form-error is-visible\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Passwords should be equal.\");\n  }\n\n  return password.value === passwordConfirm.value;\n};\n\nvar passwordLogin = function passwordLogin(value, props) {\n  // rule function can accept argument:\n  // components - components registered to Form mapped by name\n  var password = components.passwordLogin.state;\n\n  if (!password.value) {\n    return validator.isEmpty(password.value);\n  }\n\n  if (validator.isEmpty(password.value)) {\n    return React.createElement(\"span\", {\n      className: \"form-error is-visible\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Password cannot be empty\");\n  }\n};","map":{"version":3,"sources":["C:\\Users\\81484\\Documents\\mom-dashboard\\client\\src\\views\\validation.js"],"names":["React","Validation","validator","required","value","toString","trim","length","email","isEmail","lt","props","maxLength","alphabet","isAlpha","number","isInt","password","components","state","passwordConfirm","isBothUsed","isUsed","isBothChanged","isChanged","passwordLogin","isEmpty"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// NOTE: Deprecated\r\nimport Validation from 'react-validation';\r\n// From v2.10.0\r\nimport validator from 'validator';\r\n\r\n// Use Object.assign or any similar API to merge a rules\r\n// NOTE: IE10 doesn't have Object.assign API natively. Use polyfill/babel plugin.\r\nvar required = (value) => {\r\n    if (!value.toString().trim().length) {\r\n        // We can return string or jsx as the 'error' prop for the validated Component\r\n        return 'require';\r\n    }\r\n};\r\n\r\nvar email = (value) => {\r\n    if (!validator.isEmail(value)) {\r\n        return `${value} is not a valid email.`\r\n    }\r\n};\r\n\r\nvar lt = (value, props) => {\r\n    // get the maxLength from component's props\r\n    if (!value.toString().trim().length > props.maxLength) {\r\n      // Return jsx\r\n      return <span className=\"form-error is-visible\">The value exceeded {props.maxLength} symbols.</span>\r\n    }\r\n  };\r\n \r\nvar alphabet = (value, props) => {\r\n    if (!validator.isAlpha(value))\r\n    return <span className=\"form-error is-visible\">String should contain only letters (a-zA-Z)</span>\r\n};\r\nvar number = (value, props) => {\r\n    if (!validator.isInt(value))\r\n    return <span className=\"form-error is-visible\">Only proper number is required</span>\r\n};\r\n\r\n// This example shows a way to handle common task - compare two fields for equality\r\nvar password = (value, props) =>  {\r\n    // rule function can accept argument:\r\n    // components - components registered to Form mapped by name\r\n        const password = components.password.state;\r\n        const passwordConfirm = components.passwordConfirm.state;\r\n        const isBothUsed = password\r\n            && passwordConfirm\r\n            && password.isUsed\r\n            && passwordConfirm.isUsed;\r\n        const isBothChanged = isBothUsed && password.isChanged && passwordConfirm.isChanged;\r\n        if (isBothUsed && isBothChanged || password.value === passwordConfirm.value) {\r\n            return <span className=\"form-error is-visible\">Passwords should be equal.</span>\r\n        }\r\n        return password.value === passwordConfirm.value;\r\n};\r\n\r\nvar passwordLogin = (value, props) =>  {    // rule function can accept argument:\r\n    // components - components registered to Form mapped by name\r\n        var password = components.passwordLogin.state;\r\n        if (!password.value) {\r\n            return validator.isEmpty(password.value)\r\n        }\r\n        if (validator.isEmpty(password.value)){\r\n            return <span className=\"form-error is-visible\">Password cannot be empty</span>\r\n        }\r\n    };"]},"metadata":{},"sourceType":"module"}