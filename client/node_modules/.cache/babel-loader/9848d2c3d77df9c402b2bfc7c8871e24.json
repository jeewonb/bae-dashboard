{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81484\\\\Documents\\\\mom-dashboard\\\\client\\\\src\\\\views\\\\validation.js\";\nimport React from 'react'; // NOTE: Deprecated\n\nimport Validation from 'react-validation'; // From v2.10.0\n\nimport { rules, Form, Input, Select, Textarea, Button } from 'react-validation/lib/build/validation.rc';\nimport validator from 'validator'; // Use Object.assign or any similar API to merge a rules\n// NOTE: IE10 doesn't have Object.assign API natively. Use polyfill/babel plugin.\n\nObject.assign(Validation.rules, {\n  // Key name maps the rule\n  required: {\n    // Function to validate value\n    // NOTE: value might be a number -> force to string\n    rule: function rule(value) {\n      return value.toString().trim();\n    },\n    // Function to return hint\n    // You may use current value to inject it in some way to the hint\n    hint: function hint(value) {\n      return React.createElement(\"span\", {\n        className: \"form-error is-visible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Required\");\n    }\n  },\n  email: {\n    // Example usage with external 'validator'\n    rule: function rule(value) {\n      return validator.isEmail(value);\n    },\n    hint: function hint(value) {\n      return React.createElement(\"span\", {\n        className: \"form-error is-visible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, value, \" isnt an Email.\");\n    }\n  },\n  alpha: {\n    rule: function rule(value) {\n      return validator.isAlpha(value);\n    },\n    hint: function hint() {\n      return React.createElement(\"span\", {\n        className: \"form-error is-visible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"String should contain only letters (a-zA-Z).\");\n    }\n  },\n  number: {\n    rule: function rule(value) {\n      return validator.isInt(value);\n    },\n    hint: function hint() {\n      return React.createElement(\"span\", {\n        className: \"form-error is-visible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Only proper number is required\");\n    }\n  },\n  // This example shows a way to handle common task - compare two fields for equality\n  password: {\n    // rule function can accept argument:\n    // components - components registered to Form mapped by name\n    rule: function rule(value, components) {\n      var password = components.password.state;\n      var passwordConfirm = components.passwordConfirm.state;\n      var isBothUsed = password && passwordConfirm && password.isUsed && passwordConfirm.isUsed;\n      var isBothChanged = isBothUsed && password.isChanged && passwordConfirm.isChanged;\n\n      if (!isBothUsed || !isBothChanged) {\n        return true;\n      }\n\n      return password.value === passwordConfirm.value;\n    },\n    hint: function hint() {\n      return React.createElement(\"span\", {\n        className: \"form-error is-visible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Passwords should be equal.\");\n    }\n  },\n  passwordLogin: {\n    // rule function can accept argument:\n    // components - components registered to Form mapped by name\n    rule: function rule(value, components) {\n      var password = components.passwordLogin.state;\n\n      if (password.value) {\n        console.log(password.value);\n        return validator.isEmpty(password.value);\n      }\n    },\n    hint: function hint() {\n      return React.createElement(\"span\", {\n        className: \"form-error is-visible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Password cannot be empty\");\n    }\n  },\n  // Define API rule to show hint after API error response\n  api: {\n    // We don't need the rule here because we will call the 'showError' method by hand on API error\n    hint: function hint(value) {\n      return React.createElement(\"button\", {\n        className: \"form-error is-visible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"API Error on \\\"\", value, \"\\\" value. Focus to hide.\");\n    }\n  }\n});","map":{"version":3,"sources":["C:\\Users\\81484\\Documents\\mom-dashboard\\client\\src\\views\\validation.js"],"names":["React","Validation","rules","Form","Input","Select","Textarea","Button","validator","Object","assign","required","rule","value","toString","trim","hint","email","isEmail","alpha","isAlpha","number","isInt","password","components","state","passwordConfirm","isBothUsed","isUsed","isBothChanged","isChanged","passwordLogin","console","log","isEmpty","api"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// NOTE: Deprecated\r\nimport Validation from 'react-validation';\r\n// From v2.10.0\r\nimport { rules, Form, Input, Select, Textarea, Button } from 'react-validation/lib/build/validation.rc'\r\nimport validator from 'validator';\r\n\r\n// Use Object.assign or any similar API to merge a rules\r\n// NOTE: IE10 doesn't have Object.assign API natively. Use polyfill/babel plugin.\r\nObject.assign(Validation.rules, {\r\n    // Key name maps the rule\r\n    required: {\r\n        // Function to validate value\r\n        // NOTE: value might be a number -> force to string\r\n        rule: value => {\r\n            return value.toString().trim();\r\n        },\r\n        // Function to return hint\r\n        // You may use current value to inject it in some way to the hint\r\n        hint: value => {\r\n            return <span className='form-error is-visible'>Required</span>\r\n        }\r\n    },\r\n    email: {\r\n        // Example usage with external 'validator'\r\n        rule: value => {\r\n            return validator.isEmail(value);\r\n        },\r\n        hint: value => {\r\n            return <span className='form-error is-visible'>{value} isnt an Email.</span>\r\n        }\r\n    },\r\n    alpha: {\r\n        rule: value => validator.isAlpha(value),\r\n        hint: () => (\r\n            <span className=\"form-error is-visible\">\r\n                String should contain only letters (a-zA-Z).\r\n            </span>\r\n        )\r\n    },\r\n    number: {\r\n        rule: value => validator.isInt(value),\r\n        hint: () => (\r\n            <span className=\"form-error is-visible\">\r\n                Only proper number is required\r\n            </span>\r\n        )\r\n    },\r\n    // This example shows a way to handle common task - compare two fields for equality\r\n    password: {\r\n        // rule function can accept argument:\r\n        // components - components registered to Form mapped by name\r\n        rule: (value, components) => {\r\n            const password = components.password.state;\r\n            const passwordConfirm = components.passwordConfirm.state;\r\n            const isBothUsed = password\r\n                && passwordConfirm\r\n                && password.isUsed\r\n                && passwordConfirm.isUsed;\r\n            const isBothChanged = isBothUsed && password.isChanged && passwordConfirm.isChanged;\r\n            if (!isBothUsed || !isBothChanged) {\r\n                return true;\r\n            }\r\n\r\n            return password.value === passwordConfirm.value;\r\n        },\r\n        hint: () => <span className=\"form-error is-visible\">Passwords should be equal.</span>\r\n    },\r\n\r\n    passwordLogin: {\r\n        // rule function can accept argument:\r\n        // components - components registered to Form mapped by name\r\n        rule: (value, components) => {\r\n            const password = components.passwordLogin.state;\r\n            if(password.value){\r\n                console.log(password.value)\r\n                return validator.isEmpty(password.value)\r\n            }\r\n        },\r\n        hint: () => <span className=\"form-error is-visible\">Password cannot be empty</span>\r\n    },\r\n    // Define API rule to show hint after API error response\r\n    api: {\r\n        // We don't need the rule here because we will call the 'showError' method by hand on API error\r\n        hint: value => (\r\n            <button\r\n                className=\"form-error is-visible\"\r\n            >\r\n                API Error on \"{value}\" value. Focus to hide.\r\n            </button>\r\n        )\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}